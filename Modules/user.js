// Importing the mongoose library to define the schema and model
const mongoose = require('mongoose');

// Importing bcryptjs for hashing passwords and comparing hashes
const bcrypt = require('bcryptjs');

// Defining the schema for the User model with various fields and configurations
const userSchema = new mongoose.Schema(
  {
    // User ID field with a unique identifier generated by default
    id: {
      type: String,
      required: true,
      unique: true,
      default: () => new mongoose.Types.ObjectId().toString() // Generates a unique ID
    },
    // Email field with validation and formatting
    email: {
      type: String,
      required: true, // Email is mandatory
      unique: true, // Email must be unique
      trim: true, // Removes extra spaces
      lowercase: true // Converts email to lowercase
    },
    // Password field for storing hashed passwords
    password: {
      type: String,
      required: true // Password is mandatory
    },
    // Username field with validation and formatting
    username: {
      type: String,
      required: true, // Username is mandatory
      unique: true, // Username must be unique
      trim: true // Removes extra spaces
    },
    // Phone number field (optional)
    phoneNumber: {
      type: String,
      trim: true // Removes extra spaces
    },
    // Field to indicate if the user is an admin, with a default value of `false`
    isAdmin: {
      type: Boolean,
      default: false
    }
  },
  { timestamps: true } // Automatically adds `createdAt` and `updatedAt` fields
);

// Pre-save middleware to hash the password before saving it to the database
userSchema.pre('save', async function(next) {
  // Only hash the password if it has been modified
  if (!this.isModified('password')) return next();
  // Hashing the password with a salt of 12 rounds
  this.password = await bcrypt.hash(this.password, 12);
  next();
});

// Instance method to check if a candidate password matches the hashed password
userSchema.methods.correctPassword = async function(candidatePassword) {
  // Comparing the provided password with the stored hashed password
  return await bcrypt.compare(candidatePassword, this.password);
};

// Creating the User model from the schema
const User = mongoose.model('User', userSchema);

// Exporting the User model for use in other parts of the application
module.exports = User;
